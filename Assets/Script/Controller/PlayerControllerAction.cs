//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input System/PlayerControllerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControllerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControllerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControllerAction"",
    ""maps"": [
        {
            ""name"": ""In Level"",
            ""id"": ""452e65f9-5358-48f4-bafd-3d6235f7b4dc"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""119a3c65-2743-44f2-a482-0afb7a13711b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartScene"",
                    ""type"": ""Value"",
                    ""id"": ""b38fe268-676a-4d7f-92a4-c5b5adc19f2c"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a6d4b0e8-d79d-4147-a4ae-92eb59d84fe6"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Catapult Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c682627b-20c3-4c72-baed-b65ae3919aa1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Free Camera Movement"",
                    ""type"": ""Value"",
                    ""id"": ""88bc5641-5011-411b-a18e-a27d99fede42"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5fec069f-2497-429b-81e9-893409f6a148"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a75b7b62-5d70-48e8-bd94-bf9fe688b88e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b08b5f62-33d3-45d7-97b1-9d7c7a5b1007"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""RestartScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""ec4304c5-73f7-4cef-991f-7e921799c7bd"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""f4adefbb-abf7-4af2-af19-a38117e6cce5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""6d542604-4c35-4b00-a67f-1f7c831bef54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fdbf12b7-acc2-49e0-b596-0c1fc644d618"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Catapult Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4e75106e-4223-479a-92fa-6ae7489534e8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Camera Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cbba91d6-2c4a-4338-be71-25b8567e653c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""48568839-6890-4eb6-840d-831c01fc153c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5052c9e3-0847-4be2-9b1d-cfdffa79f7c7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89453d48-4bed-4e74-a292-3897e017eb71"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Camera Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""2bc9dcf0-642b-454d-ba20-cc58b13e94c5"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // In Level
        m_InLevel = asset.FindActionMap("In Level", throwIfNotFound: true);
        m_InLevel_Attack = m_InLevel.FindAction("Attack", throwIfNotFound: true);
        m_InLevel_RestartScene = m_InLevel.FindAction("RestartScene", throwIfNotFound: true);
        m_InLevel_Move = m_InLevel.FindAction("Move", throwIfNotFound: true);
        m_InLevel_CatapultMovement = m_InLevel.FindAction("Catapult Movement", throwIfNotFound: true);
        m_InLevel_FreeCameraMovement = m_InLevel.FindAction("Free Camera Movement", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In Level
    private readonly InputActionMap m_InLevel;
    private List<IInLevelActions> m_InLevelActionsCallbackInterfaces = new List<IInLevelActions>();
    private readonly InputAction m_InLevel_Attack;
    private readonly InputAction m_InLevel_RestartScene;
    private readonly InputAction m_InLevel_Move;
    private readonly InputAction m_InLevel_CatapultMovement;
    private readonly InputAction m_InLevel_FreeCameraMovement;
    public struct InLevelActions
    {
        private @PlayerControllerAction m_Wrapper;
        public InLevelActions(@PlayerControllerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_InLevel_Attack;
        public InputAction @RestartScene => m_Wrapper.m_InLevel_RestartScene;
        public InputAction @Move => m_Wrapper.m_InLevel_Move;
        public InputAction @CatapultMovement => m_Wrapper.m_InLevel_CatapultMovement;
        public InputAction @FreeCameraMovement => m_Wrapper.m_InLevel_FreeCameraMovement;
        public InputActionMap Get() { return m_Wrapper.m_InLevel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InLevelActions set) { return set.Get(); }
        public void AddCallbacks(IInLevelActions instance)
        {
            if (instance == null || m_Wrapper.m_InLevelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InLevelActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @RestartScene.started += instance.OnRestartScene;
            @RestartScene.performed += instance.OnRestartScene;
            @RestartScene.canceled += instance.OnRestartScene;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @CatapultMovement.started += instance.OnCatapultMovement;
            @CatapultMovement.performed += instance.OnCatapultMovement;
            @CatapultMovement.canceled += instance.OnCatapultMovement;
            @FreeCameraMovement.started += instance.OnFreeCameraMovement;
            @FreeCameraMovement.performed += instance.OnFreeCameraMovement;
            @FreeCameraMovement.canceled += instance.OnFreeCameraMovement;
        }

        private void UnregisterCallbacks(IInLevelActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @RestartScene.started -= instance.OnRestartScene;
            @RestartScene.performed -= instance.OnRestartScene;
            @RestartScene.canceled -= instance.OnRestartScene;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @CatapultMovement.started -= instance.OnCatapultMovement;
            @CatapultMovement.performed -= instance.OnCatapultMovement;
            @CatapultMovement.canceled -= instance.OnCatapultMovement;
            @FreeCameraMovement.started -= instance.OnFreeCameraMovement;
            @FreeCameraMovement.performed -= instance.OnFreeCameraMovement;
            @FreeCameraMovement.canceled -= instance.OnFreeCameraMovement;
        }

        public void RemoveCallbacks(IInLevelActions instance)
        {
            if (m_Wrapper.m_InLevelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInLevelActions instance)
        {
            foreach (var item in m_Wrapper.m_InLevelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InLevelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InLevelActions @InLevel => new InLevelActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    public struct UIActions
    {
        private @PlayerControllerAction m_Wrapper;
        public UIActions(@PlayerControllerAction wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IInLevelActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnRestartScene(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnCatapultMovement(InputAction.CallbackContext context);
        void OnFreeCameraMovement(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
    }
}
